#include <pcl/range_image/range_image.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <iostream>

using namespace std;

using namespace pcl;
int main(int argc, char** argv)
{
	PointCloud<PointXYZ> pointCloud;
	
	//Generate the data
	for (float y=-0.5f;y<=0.5f;y+=0.01f)
	{
		for(float z=-0.5f;z<=0.5f;z+=0.01f)
		{
			PointXYZ point;
			point.x = 2.0f - y;
			point.y = y;
			point.z = z;
			pointCloud.points.push_bacK(point);		
		}	
	}
	
	pointCloud.width = (uint32_t) pointCloud.points.size();
	pointCloud.height = 1;
		
	//We now want to create a range image from the above point cloud, with a 1deg angular resolution
	float angularResolution = (float) (1.0f * (M_PI/180.0f)); //1.0 degree in radians
	float maxAngleWidth = (float)(360.0f * (M_PI/180.0f)); //360 degree in radians
	float maxAngleHeight = (float)(180.0f * (M_PI/180.0f));//180.0 degree in radians
	
	Eigen::Affine3f sensorPose = (Eigen::Affine3f)Eigen::Translation3f(0.0f,0.0f,0.0f);
	
	RangeImage::CoordinateFrame coordinate_frame = RangeImage::CAMERA_FRAME;
	float noiseLevel = 0.00;
	float minRange = 0.0f;
	float boarderSize = 1;

	RangeImage rangeImage;	
	rangeImage.createFromPointCloud(pointCloud,angularResolution,maxAngleWidth,maxAngleHeight,sensorPose,coordinate_frame,noiseLevel,minRange,borderSize);
	
	cout<<rangeImage<<"\n"<<endl; 
}
